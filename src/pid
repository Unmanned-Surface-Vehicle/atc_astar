/*********************************************************************
*
* Software License Agreement (BSD License)
*
*  Copyright (c) 2009, Willow Garage, Inc.
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of Willow Garage, Inc. nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*
* Author: Eitan Marder-Eppstein
*********************************************************************/
#include <rra_local_planner/rra_planner.h>
#include <base_local_planner/goal_functions.h>
#include <base_local_planner/map_grid_cost_point.h>
#include <cmath>

//for computing path distance
#include <queue>

#include <angles/angles.h>

#include <ros/ros.h>

#include <pcl_conversions/pcl_conversions.h>

// #include <math.h>       /* atan */

#define PI 3.14159265
#define Kp 0.1
#define Ki 0

namespace rra_local_planner {

  double euclidian_distance (Pos pos, double x, double y);
  double linear_vel         (Pos pos, double x, double y, double constt = 1);
  double angular_vel        (Pos pos, double x, double y, double self_th, double constt = 1);
  double steering_angle     (Pos pos, double x, double y);


  void RRAPlanner::reconfigure(RRAPlannerConfig &config)
  {

    boost::mutex::scoped_lock l(configuration_mutex_);

    generator_.setParameters(
        config.sim_time,
        config.sim_granularity,
        config.angular_sim_granularity,
        config.use_rra,
        sim_period_);

    double resolution = planner_util_->getCostmap()->getResolution();
    pdist_scale_ = config.path_distance_bias;
    // pdistscale used for both path and alignment, set  forward_point_distance to zero to discard alignment
    path_costs_.setScale(resolution * pdist_scale_ * 0.5);
    alignment_costs_.setScale(resolution * pdist_scale_ * 0.5);

    gdist_scale_ = config.goal_distance_bias;
    goal_costs_.setScale(resolution * gdist_scale_ * 0.5);
    goal_front_costs_.setScale(resolution * gdist_scale_ * 0.5);

    occdist_scale_ = config.occdist_scale;
    obstacle_costs_.setScale(resolution * occdist_scale_);

    stop_time_buffer_ = config.stop_time_buffer;
    oscillation_costs_.setOscillationResetDist(config.oscillation_reset_dist, config.oscillation_reset_angle);
    forward_point_distance_ = config.forward_point_distance;
    goal_front_costs_.setXShift(forward_point_distance_);
    alignment_costs_.setXShift(forward_point_distance_);
 
    // obstacle costs can vary due to scaling footprint feature
    obstacle_costs_.setParams(config.max_trans_vel, config.max_scaling_factor, config.scaling_speed);

    twirling_costs_.setScale(config.twirling_scale);

    int vx_samp, vy_samp, vth_samp;
    vx_samp = config.vx_samples;
    vy_samp = config.vy_samples;
    vth_samp = config.vth_samples;

    double I = 0;

    if (vx_samp <= 0) {
      ROS_WARN("You've specified that you don't want any samples in the x dimension. We'll at least assume that you want to sample one value... so we're going to set vx_samples to 1 instead");
      vx_samp = 1;
      config.vx_samples = vx_samp;
    }
 
    if (vy_samp <= 0) {
      ROS_WARN("You've specified that you don't want any samples in the y dimension. We'll at least assume that you want to sample one value... so we're going to set vy_samples to 1 instead");
      vy_samp = 1;
      config.vy_samples = vy_samp;
    }
 
    if (vth_samp <= 0) {
      ROS_WARN("You've specified that you don't want any samples in the th dimension. We'll at least assume that you want to sample one value... so we're going to set vth_samples to 1 instead");
      vth_samp = 1;
      config.vth_samples = vth_samp;
    }
 
    vsamples_[0] = vx_samp;
    vsamples_[1] = vy_samp;
    vsamples_[2] = vth_samp;
 

  }

  RRAPlanner::RRAPlanner(std::string name, base_local_planner::LocalPlannerUtil *planner_util) :
      planner_util_(planner_util),
      obstacle_costs_(planner_util->getCostmap()),
      path_costs_(planner_util->getCostmap()),
      goal_costs_(planner_util->getCostmap(), 0.0, 0.0, true),
      goal_front_costs_(planner_util->getCostmap(), 0.0, 0.0, true),
      alignment_costs_(planner_util->getCostmap())
  {
    ros::NodeHandle private_nh("~/" + name);

    goal_front_costs_.setStopOnFailure( false );
    alignment_costs_.setStopOnFailure( false );

    //Assuming this planner is being run within the navigation stack, we can
    //just do an upward search for the frequency at which its being run. This
    //also allows the frequency to be overwritten locally.
    std::string controller_frequency_param_name;
    if(!private_nh.searchParam("controller_frequency", controller_frequency_param_name)) {
      sim_period_ = 0.05;
    } else {
      double controller_frequency = 0;
      private_nh.param(controller_frequency_param_name, controller_frequency, 20.0);
      if(controller_frequency > 0) {
        sim_period_ = 1.0 / controller_frequency;
      } else {
        ROS_WARN("A controller_frequency less than 0 has been set. Ignoring the parameter, assuming a rate of 20Hz");
        sim_period_ = 0.05;
      }
    }
    ROS_INFO("Sim period is set to %.2f", sim_period_);

    oscillation_costs_.resetOscillationFlags();

    bool sum_scores;
    private_nh.param("sum_scores", sum_scores, false);
    obstacle_costs_.setSumScores(sum_scores);


    private_nh.param("publish_cost_grid_pc", publish_cost_grid_pc_, false);
    map_viz_.initialize(name, planner_util->getGlobalFrame(), boost::bind(&RRAPlanner::getCellCosts, this, _1, _2, _3, _4, _5, _6));

    std::string frame_id;
    private_nh.param("global_frame_id", frame_id, std::string("odom"));

    traj_cloud_ = new pcl::PointCloud<base_local_planner::MapGridCostPoint>;
    traj_cloud_->header.frame_id = frame_id;
    traj_cloud_pub_.advertise(private_nh, "trajectory_cloud", 1);
    private_nh.param("publish_traj_pc", publish_traj_pc_, false);

    // set up all the cost functions that will be applied in order
    // (any function returning negative values will abort scoring, so the order can improve performance)
    std::vector<base_local_planner::TrajectoryCostFunction*> critics;
    critics.push_back(&oscillation_costs_); // discards oscillating motions (assisgns cost -1)
    critics.push_back(&obstacle_costs_); // discards trajectories that move into obstacles
    critics.push_back(&goal_front_costs_); // prefers trajectories that make the nose go towards (local) nose goal
    critics.push_back(&alignment_costs_); // prefers trajectories that keep the robot nose on nose path
    critics.push_back(&path_costs_); // prefers trajectories on global path
    critics.push_back(&goal_costs_); // prefers trajectories that go towards (local) goal, based on wave propagation
    critics.push_back(&twirling_costs_); // optionally prefer trajectories that don't spin

    // trajectory generators
    std::vector<base_local_planner::TrajectorySampleGenerator*> generator_list;
    generator_list.push_back(&generator_);

    scored_sampling_planner_ = base_local_planner::SimpleScoredSamplingPlanner(generator_list, critics);

    private_nh.param("cheat_factor", cheat_factor_, 1.0);
  }

  // used for visualization only, total_costs are not really total costs
  bool RRAPlanner::getCellCosts(int cx, int cy, float &path_cost, float &goal_cost, float &occ_cost, float &total_cost) {

    path_cost = path_costs_.getCellCosts(cx, cy);
    goal_cost = goal_costs_.getCellCosts(cx, cy);
    occ_cost = planner_util_->getCostmap()->getCost(cx, cy);
    if (path_cost == path_costs_.obstacleCosts() ||
        path_cost == path_costs_.unreachableCellCosts() ||
        occ_cost >= costmap_2d::INSCRIBED_INFLATED_OBSTACLE) {
      return false;
    }

    double resolution = planner_util_->getCostmap()->getResolution();
    total_cost =
        pdist_scale_ * resolution * path_cost +
        gdist_scale_ * resolution * goal_cost +
        occdist_scale_ * occ_cost;
    return true;
  }

  bool RRAPlanner::setPlan(const std::vector<geometry_msgs::PoseStamped>& orig_global_plan) {
    oscillation_costs_.resetOscillationFlags();
    return planner_util_->setPlan(orig_global_plan);
  }

  /**
   * This function is used when other strategies are to be applied,
   * but the cost functions for obstacles are to be reused.
   */
  bool RRAPlanner::checkTrajectory(
      Eigen::Vector3f pos,
      Eigen::Vector3f vel,
      Eigen::Vector3f vel_samples){
    oscillation_costs_.resetOscillationFlags();
    base_local_planner::Trajectory traj;
    geometry_msgs::PoseStamped goal_pose = global_plan_.back();
    Eigen::Vector3f goal(goal_pose.pose.position.x, goal_pose.pose.position.y, tf::getYaw(goal_pose.pose.orientation));
    base_local_planner::LocalPlannerLimits limits = planner_util_->getCurrentLimits();
    generator_.initialise(pos,
        vel,
        goal,
        &limits,
        vsamples_);
    generator_.generateTrajectory(pos, vel, vel_samples, traj);
    double cost = scored_sampling_planner_.scoreTrajectory(traj, -1);
    //if the trajectory is a legal one... the check passes
    if(cost >= 0) {
      return true;
    }
    ROS_WARN("Invalid Trajectory %f, %f, %f, cost: %f", vel_samples[0], vel_samples[1], vel_samples[2], cost);

    //otherwise the check fails
    return false;
  }


  void RRAPlanner::updatePlanAndLocalCosts(
      tf::Stamped<tf::Pose> global_pose,
      const std::vector<geometry_msgs::PoseStamped>& new_plan,
      const std::vector<geometry_msgs::Point>& footprint_spec) {
    global_plan_.resize(new_plan.size());
    for (unsigned int i = 0; i < new_plan.size(); ++i) {
      global_plan_[i] = new_plan[i];
    }

    obstacle_costs_.setFootprint(footprint_spec);

    // costs for going away from path
    path_costs_.setTargetPoses(global_plan_);

    // costs for not going towards the local goal as much as possible
    goal_costs_.setTargetPoses(global_plan_);

    // alignment costs
    geometry_msgs::PoseStamped goal_pose = global_plan_.back();

    Eigen::Vector3f pos(global_pose.getOrigin().getX(), global_pose.getOrigin().getY(), tf::getYaw(global_pose.getRotation()));
    double sq_dist =
        (pos[0] - goal_pose.pose.position.x) * (pos[0] - goal_pose.pose.position.x) +
        (pos[1] - goal_pose.pose.position.y) * (pos[1] - goal_pose.pose.position.y);

    // we want the robot nose to be drawn to its final position
    // (before robot turns towards goal orientation), not the end of the
    // path for the robot center. Choosing the final position after
    // turning towards goal orientation causes instability when the
    // robot needs to make a 180 degree turn at the end
    std::vector<geometry_msgs::PoseStamped> front_global_plan = global_plan_;
    double angle_to_goal = atan2(goal_pose.pose.position.y - pos[1], goal_pose.pose.position.x - pos[0]);
    front_global_plan.back().pose.position.x = front_global_plan.back().pose.position.x +
      forward_point_distance_ * cos(angle_to_goal);
    front_global_plan.back().pose.position.y = front_global_plan.back().pose.position.y + forward_point_distance_ *
      sin(angle_to_goal);

    goal_front_costs_.setTargetPoses(front_global_plan);
    
    // keeping the nose on the path
    if (sq_dist > forward_point_distance_ * forward_point_distance_ * cheat_factor_) {
      double resolution = planner_util_->getCostmap()->getResolution();
      alignment_costs_.setScale(resolution * pdist_scale_ * 0.5);
      // costs for robot being aligned with path (nose on path, not ju
      alignment_costs_.setTargetPoses(global_plan_);
    } else {
      // once we are close to goal, trying to keep the nose close to anything destabilizes behavior.
      alignment_costs_.setScale(0.0);
    }
  }

  // /*
  //  * given the current state of the robot, find a good trajectory
  //  */
  // base_local_planner::Trajectory RRAPlanner::findBestPath(
  //     tf::Stamped<tf::Pose> global_pose,
  //     tf::Stamped<tf::Pose> global_vel,
  //     tf::Stamped<tf::Pose>& drive_velocities) {

  //   //make sure that our configuration doesn't change mid-run
  //   boost::mutex::scoped_lock l(configuration_mutex_);

  //   Eigen::Vector3f pos(global_pose.getOrigin().getX(), global_pose.getOrigin().getY(), tf::getYaw(global_pose.getRotation()));
  //   Eigen::Vector3f vel(global_vel.getOrigin().getX(), global_vel.getOrigin().getY(), tf::getYaw(global_vel.getRotation()));
  //   geometry_msgs::PoseStamped goal_pose = global_plan_.back();
  //   Eigen::Vector3f goal(goal_pose.pose.position.x, goal_pose.pose.position.y, tf::getYaw(goal_pose.pose.orientation));
  //   base_local_planner::LocalPlannerLimits limits = planner_util_->getCurrentLimits();

  //   // prepare cost functions and generators for this run
  //   generator_.initialise(pos,
  //       vel,
  //       goal,
  //       &limits,
  //       vsamples_);

  //   result_traj_.cost_ = -7;
  //   // find best trajectory by sampling and scoring the samples
  //   std::vector<base_local_planner::Trajectory> all_explored;
  //   scored_sampling_planner_.findBestTrajectory(result_traj_, &all_explored);

  //   if(publish_traj_pc_)
  //   {
  //       base_local_planner::MapGridCostPoint pt;
  //       traj_cloud_->points.clear();
  //       traj_cloud_->width = 0;
  //       traj_cloud_->height = 0;
  //       std_msgs::Header header;
  //       pcl_conversions::fromPCL(traj_cloud_->header, header);
  //       header.stamp = ros::Time::now();
  //       traj_cloud_->header = pcl_conversions::toPCL(header);
  //       for(std::vector<base_local_planner::Trajectory>::iterator t=all_explored.begin(); t != all_explored.end(); ++t)
  //       {
  //           if(t->cost_<0)
  //               continue;
  //           // Fill out the plan
  //           for(unsigned int i = 0; i < t->getPointsSize(); ++i) {
  //               double p_x, p_y, p_th;
  //               t->getPoint(i, p_x, p_y, p_th);
  //               pt.x=p_x;
  //               pt.y=p_y;
  //               pt.z=0;
  //               pt.path_cost=p_th;
  //               pt.total_cost=t->cost_;
  //               traj_cloud_->push_back(pt);
  //           }
  //       }
  //       traj_cloud_pub_.publish(*traj_cloud_);
  //   }

  //   // verbose publishing of point clouds
  //   if (publish_cost_grid_pc_) {
  //     //we'll publish the visualization of the costs to rviz before returning our best trajectory
  //     map_viz_.publishCostCloud(planner_util_->getCostmap());
  //   }

  //   // debrief stateful scoring functions
  //   oscillation_costs_.updateOscillationFlags(pos, &result_traj_, planner_util_->getCurrentLimits().min_trans_vel);

  //   //if we don't have a legal trajectory, we'll just command zero
  //   if (result_traj_.cost_ < 0) {
  //     drive_velocities.setIdentity();
  //   } else {
  //     tf::Vector3 start(result_traj_.xv_, result_traj_.yv_, 0);
  //     drive_velocities.setOrigin(start);
  //     tf::Matrix3x3 matrix;
  //     matrix.setRotation(tf::createQuaternionFromYaw(result_traj_.thetav_));
  //     drive_velocities.setBasis(matrix);
  //   }

  //   return result_traj_;
  // }

  /*
   * given the current state of the robot, find a good trajectory
   */
  base_local_planner::Trajectory RRAPlanner::findBestPath(
      tf::Stamped<tf::Pose> global_pose,
      tf::Stamped<tf::Pose> global_vel,
      tf::Stamped<tf::Pose>& drive_velocities) {

    //make sure that our configuration doesn't change mid-run
    boost::mutex::scoped_lock l(configuration_mutex_);

    Eigen::Vector3f pos(global_pose.getOrigin().getX(), global_pose.getOrigin().getY(), tf::getYaw(global_pose.getRotation()));
    Eigen::Vector3f vel(global_vel.getOrigin().getX(), global_vel.getOrigin().getY(), tf::getYaw(global_vel.getRotation()));
    geometry_msgs::PoseStamped goal_pose = global_plan_.back();
    Eigen::Vector3f goal(goal_pose.pose.position.x, goal_pose.pose.position.y, tf::getYaw(goal_pose.pose.orientation));
    base_local_planner::LocalPlannerLimits limits = planner_util_->getCurrentLimits();

    ROS_INFO("global_plan size: %d", global_plan_.size());
    ROS_INFO("first: (%f, %f) last: (%f, %f))", 
      global_plan_.back().pose.position.x, 
      global_plan_.back().pose.position.y, 
      global_plan_.front().pose.position.x, 
      global_plan_.front().pose.position.y);

    // prepare cost functions and generators for this run
    generator_.initialise(pos,
        vel,
        goal,
        &limits,
        vsamples_);

    result_traj_.cost_ = -7;
    // find best trajectory by sampling and scoring the samples
    std::vector<base_local_planner::Trajectory> all_explored;
    scored_sampling_planner_.findBestTrajectory(result_traj_, &all_explored);

    if(publish_traj_pc_)
    {
        base_local_planner::MapGridCostPoint pt;
        traj_cloud_->points.clear();
        traj_cloud_->width = 0;
        traj_cloud_->height = 0;
        std_msgs::Header header;
        pcl_conversions::fromPCL(traj_cloud_->header, header);
        header.stamp = ros::Time::now();
        traj_cloud_->header = pcl_conversions::toPCL(header);
        for(std::vector<base_local_planner::Trajectory>::iterator t=all_explored.begin(); t != all_explored.end(); ++t)
        {
            if(t->cost_<0)
                continue;
            // Fill out the plan
            for(unsigned int i = 0; i < t->getPointsSize(); ++i) {
                double p_x, p_y, p_th;
                t->getPoint(i, p_x, p_y, p_th);
                pt.x=p_x;
                pt.y=p_y;
                pt.z=0;
                pt.path_cost=p_th;
                pt.total_cost=t->cost_;
                traj_cloud_->push_back(pt);
            }
        }
        traj_cloud_pub_.publish(*traj_cloud_);
    }

    // verbose publishing of point clouds
    if (publish_cost_grid_pc_) {
      //we'll publish the visualization of the costs to rviz before returning our best trajectory
      map_viz_.publishCostCloud(planner_util_->getCostmap());
    }

    // debrief stateful scoring functions
    oscillation_costs_.updateOscillationFlags(pos, &result_traj_, planner_util_->getCurrentLimits().min_trans_vel);

    //if we don't have a legal trajectory, we'll just command zero
    if (result_traj_.cost_ < 0) {
      drive_velocities.setIdentity();
    } else {
      Pos goal;
      goal.x = global_plan_.back().pose.position.x;
      goal.y = global_plan_.back().pose.position.y;
      tf::Vector3 start(linear_vel(goal, global_pose.getOrigin().getX(), global_pose.getOrigin().getY(), 0.1), 0, 0);
      // tf::Vector3 start(result_traj_.xv_, result_traj_.yv_, 0);
      // ROS_INFO("XV: %f, XY: %f", result_traj_.xv_, result_traj_.yv_);
      drive_velocities.setOrigin(start);

      tf::Matrix3x3 matrix;
      matrix.setRotation(tf::createQuaternionFromYaw(angular_vel(goal, global_pose.getOrigin().getX(), global_pose.getOrigin().getY(), tf::getYaw(global_pose.getRotation()), 1)));
      drive_velocities.setBasis(matrix);

    }

    return result_traj_;
  }

  // /*
  //  * given the current state of the robot, find a good trajectory
  //  */
  // base_local_planner::Trajectory RRAPlanner::findBestPath(
  //     tf::Stamped<tf::Pose> global_pose,
  //     tf::Stamped<tf::Pose> global_vel,
  //     tf::Stamped<tf::Pose>& drive_velocities) {

  //   //make sure that our configuration doesn't change mid-run
  //   boost::mutex::scoped_lock l(configuration_mutex_);

  //   Eigen::Vector3f pos(global_pose.getOrigin().getX(), global_pose.getOrigin().getY(), tf::getYaw(global_pose.getRotation()));
  //   Eigen::Vector3f vel(global_vel.getOrigin().getX(), global_vel.getOrigin().getY(), tf::getYaw(global_vel.getRotation()));
  //   geometry_msgs::PoseStamped goal_pose = global_plan_.back();
  //   Eigen::Vector3f goal(goal_pose.pose.position.x, goal_pose.pose.position.y, tf::getYaw(goal_pose.pose.orientation));
  //   base_local_planner::LocalPlannerLimits limits = planner_util_->getCurrentLimits();

  //   // prepare cost functions and generators for this run
  //   generator_.initialise(pos,
  //       vel,
  //       goal,
  //       &limits,
  //       vsamples_);

  //   result_traj_.cost_ = -7;
  //   // find best trajectory by sampling and scoring the samples
  //   std::vector<base_local_planner::Trajectory> all_explored;
  //   scored_sampling_planner_.findBestTrajectory(result_traj_, &all_explored);

  //   if(publish_traj_pc_)
  //   {
  //       base_local_planner::MapGridCostPoint pt;
  //       traj_cloud_->points.clear();
  //       traj_cloud_->width = 0;
  //       traj_cloud_->height = 0;
  //       std_msgs::Header header;
  //       pcl_conversions::fromPCL(traj_cloud_->header, header);
  //       header.stamp = ros::Time::now();
  //       traj_cloud_->header = pcl_conversions::toPCL(header);
  //       for(std::vector<base_local_planner::Trajectory>::iterator t=all_explored.begin(); t != all_explored.end(); ++t)
  //       {
  //           if(t->cost_<0)
  //               continue;
  //           // Fill out the plan
  //           for(unsigned int i = 0; i < t->getPointsSize(); ++i) {
  //               double p_x, p_y, p_th;
  //               t->getPoint(i, p_x, p_y, p_th);
  //               pt.x=p_x;
  //               pt.y=p_y;
  //               pt.z=0;
  //               pt.path_cost=p_th;
  //               pt.total_cost=t->cost_;
  //               traj_cloud_->push_back(pt);
  //           }
  //       }
  //       traj_cloud_pub_.publish(*traj_cloud_);
  //   }

  //   // verbose publishing of point clouds
  //   if (publish_cost_grid_pc_) {
  //     //we'll publish the visualization of the costs to rviz before returning our best trajectory
  //     map_viz_.publishCostCloud(planner_util_->getCostmap());
  //   }

  //   // debrief stateful scoring functions
  //   oscillation_costs_.updateOscillationFlags(pos, &result_traj_, planner_util_->getCurrentLimits().min_trans_vel);

  //   //if we don't have a legal trajectory, we'll just command zero
  //   if (result_traj_.cost_ < 0) {
  //     drive_velocities.setIdentity();
  //   } else {
  //     tf::Vector3 start(result_traj_.xv_, result_traj_.yv_, 0);
  //     drive_velocities.setOrigin(start);
  //     tf::Matrix3x3 matrix;
  //     matrix.setRotation(tf::createQuaternionFromYaw(result_traj_.thetav_));
  //     drive_velocities.setBasis(matrix);
  //   }

  //   return result_traj_;
  // }

  /*
   * given the current state of the robot, find a trajectory
   */
  // base_local_planner::Trajectory RRAPlanner::findBestPath(
  //     tf::Stamped<tf::Pose> global_pose,
  //     tf::Stamped<tf::Pose> global_vel,
  //     tf::Stamped<tf::Pose>& drive_velocities,
  //     geometry_msgs::Twist& cmd_vell) {

  //   //make sure that our configuration doesn't change mid-run
  //   boost::mutex::scoped_lock l(configuration_mutex_);

  //   geometry_msgs::PoseStamped goal_pose = global_plan_.back();
  //   // ROS_INFO("Global Plan - Back: (%f, %f)", goal_pose.pose.position.x, goal_pose.pose.position.y);

  //   base_local_planner::LocalPlannerLimits limits = planner_util_->getCurrentLimits();

  //   // Converts Costmap to graph to be used in the A* method
  //   GridWithWeights* graph = costmapToGrid( planner_util_->getCostmap() );

  //   // robot's start and goal to be used in the A* method
  //   Pos startt, goall;
  //   startt.x  = global_pose.getOrigin().getX();
  //   startt.y  = global_pose.getOrigin().getY();
  //   startt.th = global_pose.getRotation().getAngle();
  //   goall.x   = goal_pose.pose.position.xresult_traj_.thetav_;
  //   goall.y   = goal_pose.pose.position.y;

  //   // Creates data structures to me populated in the A*
  //   std::unordered_map<Pos, Pos> came_from;                                     // Path
  //   std::unordered_map<Pos, double> cost_so_far;                                // Just to be used inside A*

  //   // A* 
  //   AStar::AStar astar;                                                        // A* handler
  //   astar.AStarSearch(*(graph), startt, goall, came_from, cost_so_far);        // A* method run
  //   std::vector<Pos> path = astar.reconstruct_path(startt, goall, came_from);  // Path arrangment
  //   result_traj_.cost_ = 12;                                                    // Hard assigment for legacy behaviour

  //   ROS_INFO("Global Plan: ");
  //   for (auto glob = global_plan_.begin(); glob != global_plan_.end(); glob++)
  //   {
  //     std::cout << "(" << (*glob).pose.position.x << ", " << (*glob).pose.position.y << ")->";
  //   }
  //   std::cout << std::endl;

  //   ROS_INFO("Start:  (%f, %f, %f)", (double)startt.x,  (double)startt.y, (double)startt.th);
  //   ROS_INFO("Goal:   (%f, %f)", (double)goall.x,   (double)goall.y);
  //   ROS_INFO("Path size: %d", (int)path.size());
  //   ROS_INFO("Local Plan: ");
  //   for (auto i = path.begin(); i != path.end(); i++)
  //   {
  //     std::cout << "(" << (*i).x << ", " << (*i).y << ")->";
  //   }
  //   std::cout << std::endl;

  //   // cmd_vel generation
  //   cmd_vell.linear.x   = linear_vel(goall, startt.x, startt.y, 0.5);
  //   cmd_vell.linear.y   = 0;
  //   cmd_vell.linear.z   = 0;
  //   cmd_vell.angular.x  = 0;
  //   cmd_vell.angular.y  = 0;
  //   cmd_vell.angular.z  = angular_vel(goall, startt.x, startt.y, startt.th, 10);

  //   ROS_INFO("FROM (%f, %f) TO (%f, %f): %f", (double)startt.x,  (double)startt.y, (double)goall.x,   (double)goall.y, angles::to_degrees(cmd_vell.angular.z) );

  //   ROS_INFO("Euclidian dist.: %f", euclidian_distance(goall, startt.x, startt.x));
  //   ROS_INFO("linear vel: %f", cmd_vell.linear.x);
  //   ROS_INFO("steering angle: %f", steering_angle(goall, startt.x, startt.y));
  //   // auto local_goal = path[1];                                                  // get closest point determined by A*
  //   // cmd_vell.linear.x = linear_vel(       local_goal,
  //   //                               (double)global_pose.getOrigin().getX(),
  //   //                               (double)global_pose.getOrigin().getY(),
  //   //                               (double)1);
  //   // cmd_vell.linear.y   = 0;
  //   // cmd_vell.linear.z   = 0;
  //   // cmd_vell.angular.x  = 0;
  //   // cmd_vell.angular.y  = 0;
  //   // cmd_vell.angular.z  = angular_vel(local_goal,
  //   //                                   (double) global_pose.getOrigin().getX(),
  //   //                                   (double) global_pose.getOrigin().getY(),
  //   //                                   (double) global_pose.getOrigin().getZ(),
  //   //                                   (double) 1);

  //   // ROS_INFO("s.x: %f, s.y: %f", (double) global_pose.getOrigin().getX(), (double) global_pose.getOrigin().getY());
  //   // ROS_INFO("g.x: %f, g.y: %f", (double) local_goal.x, (double) local_goal.y);  
  //   // ROS_INFO("angular_vel: %f", cmd_vell.angular.z);

  //   return result_traj_;
  // }

  double euclidian_distance(Pos goal_pos, double self_x, double self_y){
    return sqrt(  pow(((double) goal_pos.x - self_x), 2) + 
                  pow(((double) goal_pos.y - self_y), 2));
  }

  double linear_vel(Pos goal_pos, double self_x, double self_y, double constt){
    return constt * euclidian_distance(goal_pos, self_x, self_y);
  }

  double angular_vel(Pos goal_pos, double self_x, double self_y, double self_th, double constt){
    return constt * (steering_angle(goal_pos, self_x, self_y) - self_th);

    double err = steering_angle(goal_pos, self_x, self_y) - self_th;
    double P = Kp * err;
    I += Ki * err;

    return P + I;
  }

  double steering_angle(Pos goal_pos, double self_x, double self_y){
    double angle = atan2((double) goal_pos.y - self_y, (double) goal_pos.x - self_x);

    if (angle > PI)
    {
      angle = angle - 2 * PI;
    }

    ROS_INFO("Wanted pos: (%f, %f)\nCurrent pos: (%f, %f)\nSteering Angle: %f", goal_pos.x, goal_pos.y, self_x, self_y, angle);

    return angle;
    // return atan2((double) goal_pos.y, (double) goal_pos.x) - atan2((double) goal_pos.y, (double) goal_pos.x);
  }

  //   base_local_planner::Trajectory *test_traj = new base_local_planner::Trajectory();
  //   for (auto i = path.begin(); i != path.end(); ++i){
  //     // std::cout << "(" << (*i).x << ", " << (*i).y << ")" << std::endl;
  //     test_traj->addPoint((*i).x, (*i).y, global_pose.getOrigin().getZ());
  //   }

  //   double xx, yy, zz;
  //   for (int i = 0; i < test_traj->getPointsSize(); i++)
  //   {
  //     test_traj->getPoint(i, xx, yy, zz);
  //     std::cout << "(" << xx << ", " << yy << ")->";
  //   }

  //   std::cout << std::endl;

  //   test_traj->getPoint(0, xx, yy, zz); // gets closer point
  //   test_traj->resetPoints();
  //   test_traj->xv_ = xx;
  //   test_traj->yv_ = yy;
  //   test_traj->cost_ = 12;

  //   result_traj_ = *test_traj;

  //   // debrief stateful scoring functions
  //   oscillation_costs_.updateOscillationFlags(pos, &result_traj_, planner_util_->getCurrentLimits().min_trans_vel);

  //   // cmd_vel assemble
  //   // angular velocity
  //   // linear velocity

  //   ROS_INFO("Next X: %f, Y: %f, Th: %f", xx, yy, zz);

  //   Pos auxPos;
  //   auxPos.x = xx;
  //   auxPos.y = yy;
  //   auxPos.th = zz;

  //   double result = atan2(auxPos.x - startt.x, auxPos.y - startt.y) * 180 / PI;

  //   ROS_INFO("Angle: %f", result);

  //   // drive_velocities (cmd_vel) construction
  //   tf::Vector3 start(auxPos.x, auxPos.y, 0);
  //   drive_velocities.setOrigin(start);
  //   tf::Matrix3x3 matrix;
  //   matrix.setRotation(tf::createQuaternionFromYaw(result));
  //   drive_velocities.setBasis(matrix);

  //   ROS_INFO("Drive velocities set");

  //   return result_traj_;
  // }

  GridWithWeights* RRAPlanner::costmapToGrid(costmap_2d::Costmap2D *costmap){

    Pos auxPosi;
    GridWithWeights *grid_p = new GridWithWeights(costmap->getSizeInCellsX(), costmap->getSizeInCellsY());

    for (size_t j = 0; j < costmap->getSizeInCellsY(); j++)
    {
      for (size_t i = 0; i < costmap->getSizeInCellsX(); i++)
      {
        if ( static_cast<int>(costmap->getCost(i, j)) == 254)
        {
          auxPosi.x = i;
          auxPosi.y = j;
          grid_p->walls.insert(auxPosi);
          // std::cout << "INSERTED AS WALL" << std::endl;
        }
      }
    }

    return grid_p;

  };

};
